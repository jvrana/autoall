"""
comment
import something


"""
# import something
import argparse
import ast
from builtins import open, classmethod
from os.path import abspath
from typing import Optional

parser = argparse.ArgumentParser(
                    prog='AutoAll',
                    description='Automatically generate __all__',
                    epilog='')
parser.add_argument('filename')
parser.add_argument('-i', '--inplace',
                    action='store_true')
parser.add_argument('-c', '--concise',
                    action='store_true')



if __name__ == '__main__':
    args = parser.parse_args()
    filename = args.filename
    inplace = args.inplace
    concise = args.concise

    collected_all = []
    with open(filename, 'r') as f:
        txt = f.read()
        tree = ast.parse(txt)

        all_stmt: Optional[ast.Assign] = None
        for stmt in tree.body:
            if isinstance(stmt, ast.Assign):
                try:
                    _id = stmt.targets[0].id
                    if _id == '__all__':
                        all_stmt = stmt
                        break
                except Exception:
                    ... # ignore errors here
        for stmt in tree.body:
            if isinstance(stmt, (ast.Import, ast.ImportFrom)):
                for _import in stmt.names:
                    name = _import.name
                    if name not in collected_all:
                        collected_all.append(name)

    new_all_stmt = "\n# autogenerated by autoall\n"
    new_all_stmt += "__all__ = [\n"
    for x in collected_all:
        new_all_stmt += "    \'" + x + "\',\n"
    new_all_stmt += "]\n\n"

    needs_change = True
    if all_stmt:
        if set(collected_all) == set([x.value for x in all_stmt.value.elts]):
            needs_change = False

    if needs_change:
        if concise:
            print(abspath(filename))
            print(new_all_stmt)
        else:
            with open(__file__, 'r') as f:
                lines = f.readlines()
            if all_stmt:
                lineno = all_stmt.lineno - 1
                for i in range(lineno, all_stmt.end_lineno):
                    lines.pop(lineno)
                lines.insert(lineno, new_all_stmt)
            else:
                lines.append(new_all_stmt)
            print(''.join(lines))
    else:
        if concise:
            ...
        else:
            print(f"No changes needed for {filename}")


